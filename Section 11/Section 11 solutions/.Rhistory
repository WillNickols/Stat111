# Evaluate a grid of points
grid_width <- 0.01
a_range <- seq(-2, -0.5, grid_width)
b_range <- seq(1.5, 4, grid_width)
a_b_mat <- matrix(nrow = length(a_range), ncol = length(b_range))
for (i in 1:length(a_range)) {
for (j in 1:length(b_range)) {
a_b_mat[i,j] <- a_b_post(a_range[i], b_range[j])
}
}
a_b_mat <- exp(a_b_mat - logSumExp(a_b_mat))
# Show density plot
df <- data.frame(rep(a_range, length(b_range)),
rep(b_range, each=length(a_range)),
as.vector(a_b_mat))
colnames(df) <- c("log(a/B)", "log(a+B)", "density")
p1 <- ggplot(df, aes(`log(a/B)`, `log(a+B)`, z = density)) +
geom_contour_filled() +
theme_bw() +
theme(legend.position = "none") +
xlab(expression(log(alpha/beta))) +
ylab(expression(log(alpha+beta)))
# Sample from posterior and plot thetas
nsamp <- 10^3
theta_j_mat <- matrix(nrow = nsamp, ncol = J)
p_vec <- as.vector(a_b_mat)
for (i in 1:nsamp) {
index <- sample(1:length(p_vec), 1, prob = p_vec)
log_frac <- a_range[index %% length(a_range) + 1]
log_sum <- b_range[ceiling(index / length(a_range))]
b <- exp(log_sum) / (1 + exp(log_frac))
a <- exp(log_sum) - b
theta_j_mat[i,] <- rbeta(J, a + ys, b + ns - ys)
}
df <- data.frame(theta_j_mat)
colnames(df) <- 1:J
df <- melt(df)
colnames(df) <- c("Js", "theta")
p2 <- ggplot(df, aes(x = theta,
col=factor(Js, levels = as.character((1:J)[order(ys/ns)])))) +
geom_density() +
theme_bw() +
theme(legend.position = "bottom") +
guides(col = guide_legend(title.position="top", title.hjust = 0.5)) +
ylab("Density") +
labs(col="J (ordered by average theta)") +
xlab(expression(theta))
grid.arrange(p1, p2, ncol=2, widths=c(1,1.5))
# Compute mean and 0.025 and 0.975 quantiles for each theta
summary_out_tmp <- aggregate(theta ~ Js, df, function(x)
(c(mean(x), quantile(x, c(0.025, 0.975)))))
summary_out <- data.frame(summary_out_tmp$Js, summary_out_tmp$theta)
colnames(summary_out) <- c("J", "Mean", "0.025 Quantile", "0.975 Quantile")
summary_out$`Original Ratio` <- ys/ns
ggplot(summary_out, aes(x=`Original Ratio`, y=Mean)) +
geom_point() +
geom_errorbar(aes(ymin = `0.025 Quantile`, ymax = `0.975 Quantile`)) +
geom_abline() +
theme_bw()
set.seed(220)
nsamp <- 10^4
# Sample from the alpha and beta distributions and compute many means
theta_gen_vec <- vector(length = nsamp)
for (i in 1:nsamp) {
index <- sample(1:length(p_vec), 1, prob = p_vec)
log_frac <- a_range[index %% length(a_range) + 1]
log_sum <- b_range[ceiling(index / length(a_range))]
b <- exp(log_sum) / (1 + exp(log_frac))
a <- exp(log_sum) - b
theta_gen_vec[i] <- a/(a+b)
}
quantile(theta_gen_vec, c(0.025, 0.975), na.rm = T)
set.seed(220)
nsamp <- 10^4
outputs_vec <- vector(length = nsamp)
# Sample from alpha and beta, sample from theta, sample from binomial
for (i in 1:nsamp) {
index <- sample(1:length(p_vec), 1, prob = p_vec)
log_frac <- a_range[index %% length(a_range) + 1]
log_sum <- b_range[ceiling(index / length(a_range))]
b <- exp(log_sum) / (1 + exp(log_frac))
a <- exp(log_sum) - b
outputs_vec[i] <- rbinom(1, 100, rbeta(1, a, b))
}
quantile(outputs_vec, c(0.025, 0.975), na.rm = T)
set.seed(220)
# Data
ys <- c(28, 8, -3, 7, -1, 1, 18, 12)
sigma_sqs <- c(15, 10, 16, 11, 9, 11, 10, 18)^2
J <- length(ys)
ndraw <- 10^5
theta_j_mat <- matrix(nrow = ndraw, ncol = J)
mu_vec <- vector(length = ndraw)
tau_sq_vec <- vector(length = ndraw)
# Initialize to reasonable starting values
theta_j_mat[1,] <- ys
mu_vec[1] <- mean(ys)
tau_sq_vec[1] <- mean((theta_j_mat[1,] - mean(theta_j_mat[1,]))^2)
# Update according to formulas with Gibbs sampler
for (j in 2:ndraw) {
v_theta_j <- 1 / (1 / tau_sq_vec[j - 1] + 1 / sigma_sqs)
mu_hat <- v_theta_j * (mu_vec[j - 1] / tau_sq_vec[j - 1] + ys / sigma_sqs)
theta_j_mat[j,] <- rnorm(J, mu_hat, sqrt(v_theta_j))
mu_vec[j] <- rnorm(1, mean(theta_j_mat[j,]), sqrt(tau_sq_vec[j - 1] / J))
tau_hat_sq <- 1 / (J - 1) * sum((theta_j_mat[j,] - mu_vec[j])^2)
tau_sq_vec[j] <- (J - 1) * tau_hat_sq / rchisq(1, J-1)
}
nsamp <- floor((ndraw - 1) / 10)
theta_j_mat <- theta_j_mat[seq(2, ndraw, 10),]
# Probability of having the best program
table_out <- table(apply(theta_j_mat, 1, which.max)) / nsamp
names(table_out) <- c("A", "B", "C", "D", "E", "F", "G", "H")
round(table_out, 3)
compare_mat <- matrix(nrow = length(ys), ncol = length(ys))
for (i in 1:length(ys)) {
for (j in 1:length(ys)) {
compare_mat[i,j] <- mean(theta_j_mat[,i] > theta_j_mat[,j])
}
}
# Probability row is better than column
colnames(compare_mat) <- c("A", "B", "C", "D", "E", "F", "G", "H")
rownames(compare_mat) <- c("A", "B", "C", "D", "E", "F", "G", "H")
diag(compare_mat) <- NA
knitr::kable(round(compare_mat, 3))
df <- data.frame(theta_j_mat)
colnames(df) <- c("A", "B", "C", "D", "E", "F", "G", "H")
df <- melt(df)
colnames(df) <- c("Js", "theta")
p2 <- ggplot(df, aes(x = theta, col=Js)) +
geom_density() +
theme_bw() +
ylab("Density") +
labs(col="J (ordered by initial value)") +
xlab(expression(theta))
p2
set.seed(220)
reactions <- read.csv("reactions.csv")
n <- nrow(reactions)
# Create model matrix
lm_fit <- lm(y ~ .^2 + I(x1^2) + I(x2^2) + I(x3^2), reactions)
X <- model.matrix(lm_fit)
y <- reactions$y
k <- ncol(X)
B_hat <- chol2inv(chol(t(X) %*% X)) %*% t(X) %*% y
V_b <- chol2inv(chol(t(X) %*% X))
s_sq <- 1 / (n - k) * t(y - X %*% B_hat) %*% (y - X %*% B_hat)
nsamp <- 10^4
out_mat <- matrix(nrow = nsamp, ncol = k)
sigma_sq <- vector(length = nsamp)
# Sample from posterior
for (i in 1:nsamp) {
sigma_sq[i] <- (n - k) * s_sq / rchisq(1, n-k)
out_mat[i,] <- mvrnorm(1, B_hat, sigma_sq[i] * V_b)
}
print_table <- data.frame(rbind(round(colMeans(out_mat), 3),
round(apply(out_mat, 2, median), 3),
round(apply(out_mat, 2, sd), 3)))
print_table$sigma <- c(mean(sqrt(sigma_sq)), median(sqrt(sigma_sq)), sd(sqrt(sigma_sq)))
colnames(print_table) <- c(colnames(X), "sigma")
rownames(print_table) <- c("Mean", "Median", "SD")
knitr::kable(print_table)
set.seed(220)
B_hat <- chol2inv(chol(t(X) %*% X)) %*% t(X) %*% y
V_b <- chol2inv(chol(t(X) %*% X))
s_sq <- 1 / (n - k) * t(y - X %*% B_hat) %*% (y - X %*% B_hat)
nsamp <- 10^4
out_mat <- matrix(nrow = nsamp, ncol = k)
sigma_sq <- vector(length = nsamp)
sigma_sq[1] <- (n - k) * s_sq / rchisq(1, n-k)
out_mat[1,] <- mvrnorm(1, B_hat, sigma_sq[1] * V_b)
log_likelihood <- function(betas, sigma_sq) {
mu <- X %*% betas
V <- sigma_sq * diag(length(y))
return (-k/2 * log(2 * pi) - 1/2 * log(det(V)) -1/2 * t(y - mu) %*%
solve(V) %*% (y - mu) + sum(log(dt(betas, 4))))
}
for (i in 2:nsamp) {
sigma_sq[i] <- (n - k) * s_sq / rchisq(1, n-k)
out_mat[i,] <- out_mat[i - 1,]
for (j in 1:k) {
proposed_beta <- out_mat[i, j] + rnorm(1, 0, 1)
cur_lik <- log_likelihood(out_mat[i,], sigma_sq[i])
tmp_betas <- out_mat[i,]
tmp_betas[j] <- proposed_beta
next_lik <- log_likelihood(tmp_betas, sigma_sq[i])
A = exp(next_lik - cur_lik)
if(runif(1) < A){
out_mat[i,] <- tmp_betas
}
}
}
out_mat <- out_mat[-c(1:nsamp/10),]
sigma_sq <- sigma_sq[-c(1:nsamp/10)]
out_mat <- out_mat[seq(2, nrow(out_mat), 10),]
sigma_sq <- sigma_sq[seq(2, length(sigma_sq), 10)]
joined_df <- data.frame(cbind(out_mat, sigma_sq))
colnames(joined_df) <- c(colnames(X), "Sigma squared")
joined_df$Iter <- 1:nrow(joined_df)
joined_df <- melt(joined_df, id.vars = c("Iter"))
ggplot(joined_df, aes(x = Iter, y = value)) +
geom_point() +
facet_wrap(vars(variable), scales = "free")
print_table <- data.frame(rbind(round(colMeans(out_mat), 3),
round(apply(out_mat, 2, median), 3),
round(apply(out_mat, 2, sd), 3)))
print_table$sigma <- round(c(mean(sqrt(sigma_sq)), median(sqrt(sigma_sq)),
sd(sqrt(sigma_sq))), 3)
colnames(print_table) <- c(colnames(X), "sigma")
rownames(print_table) <- c("Mean", "Median", "SD")
knitr::kable(print_table)
B_hat
chol2inv(chol(t(X) %*% X)) %*% (t(X) %*% X)
x <- 100 - rgamma(100000, 3.6, 0.2)
y <- 100 - rgamma(100000, 2.3, 0.2)
z <- 100 - rgamma(100000, 3.6, 0.2)
xy <- apply(cbind(x, y), 1, function(x) mean(sort(x)[2]))
quantile(xy, c(0.5, 0.75, 0.9))
mean(xy < 92.5)
median(x)
median(y)
median(z)
sd(x)
hist(x)
hist(y)
hist(z)
x <- 100 - rgamma(100000, 3.6, 0.2)
median(x)
x <- 100 - rgamma(100000, 3.5, 0.2)
median(x)
x <- 100 - rgamma(100000, 33, 0.2)
x <- 100 - rgamma(100000, 3.3, 0.2)
median(x)
x <- 100 - rgamma(100000, 3.0, 0.2)
median(x)
x <- 100 - rgamma(100000, 3.6, 0.2)
median(x)
x <- 100 - rgamma(100000, 3.7, 0.2)
median(x)
z <- 100 - rgamma(100000, 3.9, 0.2)
median(z)
z <- 100 - rgamma(100000, 4.1, 0.2)
median(z)
z <- 100 - rgamma(100000, 4.1, 0.2)
median(z)
z <- 100 - rgamma(100000, 4.2, 0.2)
median(z)
z <- 100 - rgamma(100000, 4.1, 0.2)
median(z)
x <- 100 - rgamma(100000, 3.7, 0.2)
y <- 100 - rgamma(100000, 2.3, 0.2)
z <- 100 - rgamma(100000, 4.1, 0.2)
xy <- apply(cbind(x, y, z), 1, function(x) mean(sort(x)[1:2]))
quantile(xy, c(0.5, 0.75, 0.9))
x <- 100 - rgamma(100000, 3.7, 0.2)
y <- 100 - rgamma(100000, 2.3, 0.2)
z <- 100 - rgamma(100000, 4.1, 0.2)
xy <- apply(cbind(x, y, z), 1, function(x) mean(sort(x)[2:3]))
quantile(xy, c(0.5, 0.75, 0.9))
mean(xy < 92.5)
median(y)
y <- 100 - rgamma(100000, 2.4, 0.2)
median(y)
mean(92.5, 89)
mean(c(92.5, 89))
mean(c(92.5, 90))
mean(xy < 91.25)
x <- 100 - rgamma(100000, 3.7, 0.2)
y <- 100 - rgamma(100000, 2.4, 0.2)
z <- 100 - rgamma(100000, 4.1, 0.2)
xy <- apply(cbind(x, y, z), 1, function(x) mean(sort(x)[2:3]))
quantile(xy, c(0.5, 0.75, 0.9))
mean(xy < 91.25)
x <- 100 - rgamma(100000, 3.7, 0.2)
y <- 100 - rgamma(100000, 2.4, 0.2)
z <- 100 - rgamma(100000, 4.1, 0.2)
xy <- apply(cbind(x, y, z), 1, function(x) mean(sort(x)[2:3]))
quantile(xy, c(0.5, 0.75, 0.9))
mean(xy < 90.75)
sd(x)
sd(y)
sd(z)
source("~/.active-rstudio-document", echo=TRUE)
x <- 100 - rgamma(1000000, 3.7, 0.2)
x <- 100 - rgamma(1000000, 3.7, 0.2)
median(x)
x <- 100 - rgamma(100000, 3.7, 0.2)
y <- 100 - rgamma(100000, 2.4, 0.2)
z <- 100 - rgamma(100000, 4.1, 0.2)
xy <- apply(cbind(x, y, z), 1, function(x) mean(sort(x)[2:3]))
quantile(xy, c(0.5, 0.75, 0.9))
mean(xy < 90.75)
x <- 100 - rgamma(1000000, 3.7, 0.2)
y <- (median(x) - x) * 0.5 + median(x) + rnorm(1000000, median(y) - median(x), sd = 2)
hist(y)
y <- ifelse(y > 100, 100, y)
hist(y)
z <- (median(x) - x) * 0.5 + median(x) + rnorm(1000000, median(z) - median(x), sd = 2)
z <- ifelse(z > 100, 100, z)
hist(z)
z <- (median(x) - x) * 0.5 + median(x) + rnorm(1000000, median(z) - median(x), sd = 3)
z <- ifelse(z > 100, 100, z)
hist(z)
max((median(x) - x) * 0.5 + median(x))
x <- 100 - rgamma(1000000, 3.7, 0.2)
y <- (median(x) - x) * 0.5 + median(x)
y <- y - (max(y) - 100)
max(y)
hist(y)
x <- 100 - rgamma(100000, 3.7, 0.2)
y <- 100 - rgamma(100000, 2.4, 0.2)
z <- 100 - rgamma(100000, 4.1, 0.2)
xy <- apply(cbind(x, y, z), 1, function(x) mean(sort(x)[2:3]))
quantile(xy, c(0.5, 0.75, 0.9))
mean(xy < 90.75)
x <- 100 - rgamma(1000000, 3.7, 0.2)
y <- (median(x) - x) * 0.5 + median(x)
hist(y)
x <- 100 - rgamma(100000, 3.7, 0.2)
y <- 100 - rgamma(100000, 2.4, 0.2)
z <- 100 - rgamma(100000, 4.1, 0.2)
xy <- apply(cbind(x, y, z), 1, function(x) mean(sort(x)[2:3]))
quantile(xy, c(0.5, 0.75, 0.9))
mean(xy < 90.75)
x <- 100 - rgamma(1000000, 3.7, 0.2)
y <- (x - median(x)) * 0.5 + median(x)
hist(y)
y <- y - (max(y) - 100)
hist(y)
x <- 100 - rgamma(1000000, 3.7, 0.2)
y <- (x - median(x)) * 0.5 + median(x)
y <- y - (max(y) - 100) + 8 - rgamma(100000, 2.4, 0.2)
hist(y)
median(y)
x <- 100 - rgamma(1000000, 3.7, 0.2)
y <- (x - median(x)) * 0.5 + median(x)
y <- y - (max(y) - 100) + 8 - rgamma(100000, 1.4, 0.2)
hist(y)
median(y)
y <- y - max(y)
median(y)
x <- 100 - rgamma(1000000, 3.7, 0.2)
y <- (x - median(x)) * 0.5 + median(x)
y <- y - (max(y) - 100) + 8 - rgamma(100000, 1.4, 0.2)
y <- y - max(y) + 100
median(y)
hist(y)
x <- 100 - rgamma(1000000, 3.7, 0.2)
y <- (x - median(x)) * 0.5 + median(x)
y <- y - (max(y) - 100) + 8 - rgamma(100000, 1.4, 0.2)
hist(y)
max(y)
median(y)
x <- 100 - rgamma(1000000, 3.7, 0.2)
y <- (x - median(x)) * 0.5 + median(x)
y <- y - (max(y) - 100) + 8 - rgamma(100000, 2, 0.2)
median(y)
max(y)
mean(y > 100)
x <- 100 - rgamma(1000000, 3.7, 0.2)
y <- (x - median(x)) * 0.5 + median(x)
y <- y - (max(y) - 100) + 8 - rgamma(100000, 2, 0.2)
y <- ifelse(y > 100, 100, y)
mean(y)
median(y)
sd(y)
cor(x,y)
z <- (x - median(x)) * 0.5 + median(x)
z <- z - (max(z) - 100) + 8 - rgamma(100000, 2, 0.2)
z <- ifelse(z > 100, 100, z)
z <- (x - median(x)) * 0.5 + median(x)
z <- z - (max(z) - 100) + 8 - rgamma(100000, 4, 0.2)
z <- ifelse(z > 100, 100, z)
hist(z)
median(z)
z <- (x - median(x)) * 0.5 + median(x)
z <- z - (max(z) - 100) + 8 - rgamma(100000, 3.9, 0.2)
z <- ifelse(z > 100, 100, z)
median(z)
hist(z)
z <- (x - median(x)) * 0.5 + median(x)
z <- z - (max(z) - 100) + 8 - rgamma(100000, 3.7, 0.2)
z <- ifelse(z > 100, 100, z)
median(z)
cor(z)
cor(x,z)
cor(y,z)
plot(x,z)
plot(x[1:1000],z[1:1000])
plot(x[1:1000],z[1:1000], xlim = c(0,100), ylim=c(0,100))
x <- 100 - rgamma(100000, 3.7, 0.2)
y <- 100 - rgamma(100000, 2.4, 0.2)
z <- 100 - rgamma(100000, 4.1, 0.2)
xy <- apply(cbind(x, y, z), 1, function(x) mean(sort(x)[2:3]))
quantile(xy, c(0.5, 0.75, 0.9))
mean(xy < 90.75)
x <- 100 - rgamma(1000000, 3.7, 0.2)
y <- (x - median(x)) * 0.5 + median(x)
y <- y - (max(y) - 100) + 8 - rgamma(100000, 2, 0.2)
y <- ifelse(y > 100, 100, y)
z <- (x - median(x)) * 0.5 + median(x)
z <- z - (max(z) - 100) + 8 - rgamma(100000, 3.7, 0.2)
z <- ifelse(z > 100, 100, z)
xy <- apply(cbind(x, y), 1, function(x) mean(sort(x)[2]))
quantile(xy, c(0.5, 0.75, 0.9))
mean(xy < 92.5)
xy <- apply(cbind(x, y), 1, function(x) mean(sort(x)[2:3]))
quantile(xy, c(0.5, 0.75, 0.9))
xy <- apply(cbind(x, y, z), 1, function(x) mean(sort(x)[2:3]))
quantile(xy, c(0.5, 0.75, 0.9))
mean(xy < 90.75)
mean(xy < 91.25)
x <- 100 - rgamma(100000, 3.7, 0.2)
y <- 100 - rgamma(100000, 2.4, 0.2)
z <- 100 - rgamma(100000, 4.1, 0.2)
xy <- apply(cbind(x, y, z), 1, function(x) mean(sort(x)[2:3]))
quantile(xy, c(0.5, 0.75, 0.9))
mean(xy < 90.75)
x <- 100 - rgamma(1000000, 3.7, 0.2)
y <- (x - median(x)) * 0.5 + median(x)
y <- y - (max(y) - 100) + 8 - rgamma(100000, 2, 0.2)
y <- ifelse(y > 100, 100, y)
z <- (x - median(x)) * 0.5 + median(x)
z <- z - (max(z) - 100) + 8 - rgamma(100000, 3.7, 0.2)
z <- ifelse(z > 100, 100, z)
xy <- apply(cbind(x, y, z), 1, function(x) mean(sort(x)[2:3]))
quantile(xy, c(0.5, 0.75, 0.9))
mean(xy < 90.75)
# Strong correlation
x <- 100 - rgamma(1000000, 3.7, 0.2)
y <- (x - median(x)) * 0.8 + median(x)
y <- y - (max(y) - 100) + 3 - rgamma(100000, 1, 0.2)
hist(y)
y <- ifelse(y > 100, 100, y)
median(y)
x <- 100 - rgamma(1000000, 3.7, 0.2)
y <- (x - median(x)) * 0.8 + median(x)
y <- y - (max(y) - 100) + 7 - rgamma(100000, 1, 0.2)
y <- ifelse(y > 100, 100, y)
hist(y)
median(y)
x <- 100 - rgamma(1000000, 3.7, 0.2)
y <- (x - median(x)) * 0.8 + median(x)
y <- y - (max(y) - 100) + 9 - rgamma(100000, 1, 0.2)
y <- ifelse(y > 100, 100, y)
median(y)
hist(y)
mean(y == 100)
z <- (x - median(x)) * 0.8 + median(x)
z <- z - (max(z) - 100) + 8 - rgamma(100000, 2.4, 0.2)
z <- ifelse(z > 100, 100, z)
median(z)
z <- (x - median(x)) * 0.8 + median(x)
z <- z - (max(z) - 100) + 8 - rgamma(100000, 2.9, 0.2)
z <- ifelse(z > 100, 100, z)
median(z)
z <- (x - median(x)) * 0.8 + median(x)
z <- z - (max(z) - 100) + 8 - rgamma(100000, 2.8, 0.2)
z <- ifelse(z > 100, 100, z)
median(z)
hist(z)
x <- 100 - rgamma(1000000, 3.7, 0.2)
y <- (x - median(x)) * 0.8 + median(x)
y <- y - (max(y) - 100) + 9 - rgamma(100000, 1, 0.2)
y <- ifelse(y > 100, 100, y)
z <- (x - median(x)) * 0.8 + median(x)
z <- z - (max(z) - 100) + 8 - rgamma(100000, 2.8, 0.2)
z <- ifelse(z > 100, 100, z)
xy <- apply(cbind(x, y, z), 1, function(x) mean(sort(x)[2:3]))
quantile(xy, c(0.5, 0.75, 0.9))
mean(xy < 90.75)
cor(x,y)
cor(x,z)
cor(y,z)
0.6759627* 0.8332806
# No correlation
x <- 100 - rgamma(100000, 3.7, 0.2)
y <- 100 - rgamma(100000, 2.4, 0.2)
z <- 100 - rgamma(100000, 4.1, 0.2)
xy <- apply(cbind(x, y, z), 1, function(x) mean(sort(x)[2:3]))
quantile(xy, c(0.5, 0.75, 0.9))
mean(xy < 90.75)
# Moderate correlation
x <- 100 - rgamma(1000000, 3.7, 0.2)
y <- (x - median(x)) * 0.5 + median(x)
y <- y - (max(y) - 100) + 8 - rgamma(100000, 2, 0.2)
y <- ifelse(y > 100, 100, y)
z <- (x - median(x)) * 0.5 + median(x)
z <- z - (max(z) - 100) + 8 - rgamma(100000, 3.7, 0.2)
z <- ifelse(z > 100, 100, z)
xy <- apply(cbind(x, y, z), 1, function(x) mean(sort(x)[2:3]))
quantile(xy, c(0.5, 0.75, 0.9))
mean(xy < 90.75)
# Strong correlation
x <- 100 - rgamma(1000000, 3.7, 0.2)
y <- (x - median(x)) * 0.8 + median(x)
y <- y - (max(y) - 100) + 9 - rgamma(100000, 1, 0.2)
y <- ifelse(y > 100, 100, y)
z <- (x - median(x)) * 0.8 + median(x)
z <- z - (max(z) - 100) + 8 - rgamma(100000, 2.8, 0.2)
z <- ifelse(z > 100, 100, z)
xy <- apply(cbind(x, y, z), 1, function(x) mean(sort(x)[2:3]))
quantile(xy, c(0.5, 0.75, 0.9))
mean(xy < 90.75)
x <- 100 - rgamma(100000, 3.7, 0.2)
y <- 100 - rgamma(100000, 2.4, 0.2)
z <- 100 - rgamma(100000, 4.1, 0.2)
mean(92.5>x)
mean(87.5>y)
mean(89>z)
mean(90>z)
mean(85>z)
mean(93>z)
