}
boots <- replicate(nboot, one_boot())
perc_method <- quantile(boots, c(0.025, 0.975))
norm_approx_1 <- c(quantile(CEA$DalyPerThousand, 0.95) / quantile(CEA$DalyPerThousand, 0.5) + sd(boots) * qnorm(0.975),
quantile(CEA$DalyPerThousand, 0.95) / quantile(CEA$DalyPerThousand, 0.5) - sd(boots) * qnorm(0.975))
one_boot <- function() {
samples <- sample(CEA$logDalyPerThousand, n, replace = T)
return(quantile(samples, 0.95) - quantile(samples, 0.5))
}
boots <- replicate(nboot, one_boot())
norm_approx_2 <- exp(c(quantile(CEA$logDalyPerThousand, 0.95) - quantile(CEA$logDalyPerThousand, 0.5) + sd(boots) * qnorm(0.975),
quantile(CEA$logDalyPerThousand, 0.95) - quantile(CEA$logDalyPerThousand, 0.5) - sd(boots) * qnorm(0.975)))
df <- data.frame(rbind(perc_method, norm_approx_1, norm_approx_2))
rownames(df) <- c("Percentile method", "Normal approximation original scale", "Normal approximation log scale")
df
nboot <- 10^4
one_boot <- function() {
samples <- sample(CEA$DalyPerThousand, n, replace = T)
return(quantile(samples, 0.95) / quantile(samples, 0.5))
}
boots <- replicate(nboot, one_boot())
perc_method <- quantile(boots, c(0.025, 0.975))
norm_approx_1 <- c(quantile(CEA$DalyPerThousand, 0.95) / quantile(CEA$DalyPerThousand, 0.5) + sd(boots) * qnorm(0.975),
quantile(CEA$DalyPerThousand, 0.95) / quantile(CEA$DalyPerThousand, 0.5) - sd(boots) * qnorm(0.975))
one_boot <- function() {
samples <- sample(CEA$logDalyPerThousand, n, replace = T)
return(quantile(samples, 0.95) - quantile(samples, 0.5))
}
boots <- replicate(nboot, one_boot())
norm_approx_2 <- exp(c(quantile(CEA$logDalyPerThousand, 0.95) - quantile(CEA$logDalyPerThousand, 0.5) + sd(boots) * qnorm(0.975),
quantile(CEA$logDalyPerThousand, 0.95) - quantile(CEA$logDalyPerThousand, 0.5) - sd(boots) * qnorm(0.975)))
df <- data.frame(round(rbind(perc_method, norm_approx_1, norm_approx_2), 3))
rownames(df) <- c("Percentile method", "Normal approximation original scale", "Normal approximation log scale")
colnames(df) <- c("Lower", "Upper")
knitr::kable(df)
X <- exp(rnorm(10000, 3, 3))
# 3. Non-parametric bootstrap
nboot <- 10^4
one_boot <- function() {
samples <- sample(X, n, replace = T)
return(quantile(samples, 0.95) / quantile(samples, 0.5))
}
boots <- replicate(nboot, one_boot())
se_3 <- sd(boots)
sd_3
se_3
exp(qnorm(0.95, 3, 3) - qnorm(0.5, 3, 3))
mean(boots)
X <- exp(rnorm(100000, 3, 3))
# 3. Non-parametric bootstrap
nboot <- 10^4
one_boot <- function() {
samples <- sample(X, n, replace = T)
return(quantile(samples, 0.95) / quantile(samples, 0.5))
}
boots <- replicate(nboot, one_boot())
n <- 100000
# 3. Non-parametric bootstrap
nboot <- 10^4
one_boot <- function() {
samples <- sample(X, n, replace = T)
return(quantile(samples, 0.95) / quantile(samples, 0.5))
}
boots <- replicate(nboot, one_boot())
mean(boots)
se_3
boots <- replicate(nboot, one_boot())
exp(qnorm(0.95, 3, 3) - qnorm(0.5, 3, 3))
mu_hat <- mean(log(X))
sigma_sq_hat <- var(log(X))
mu_hat
sigma_sq_hat
one_boot <- function() {
samples <- exp(rnorm(n, mu_hat, sqrt(sigma_sq_hat)))
return(quantile(samples, 0.95) / quantile(samples, 0.5))
}
n
boots <- replicate(nboot, one_boot())
se_4
boots <- replicate(nboot, one_boot())
mean(log(samples))
mu_hat
samples <- exp(rnorm(n, mu_hat, sqrt(sigma_sq_hat)))
mean(log(samples))
mean(var(samples))
var(log(samples))
quantile(samples, 0.95) / quantile(samples, 0.5)
n <- nrow(CEA)
nboot <- 10^4
one_boot <- function() {
samples <- sample(CEA$DalyPerThousand, n, replace = T)
return(exp(sqrt(var(CEA$logDalyPerThousand) * (nrow(CEA) - 1)/(nrow(CEA))) * qnorm(0.95)))
}
boots <- replicate(nboot, one_boot())
sd(boots)
boots
nboot <- 10^4
one_boot <- function() {
samples <- sample(CEA$DalyPerThousand, n, replace = T)
return(exp(sqrt(var(samples) * (n - 1)/(n)) * qnorm(0.95)))
}
boots <- replicate(nboot, one_boot())
sd(boots)
boots
n
var(samples)
var(CEA$logDalyPerThousand)
nboot <- 10^4
one_boot <- function() {
samples <- sample(CEA$logDalyPerThousand, n, replace = T)
return(exp(sqrt(var(samples) * (n - 1)/(n)) * qnorm(0.95)))
}
boots <- replicate(nboot, one_boot())
sd(boots)
# 2. Theta hat approximate SE
se_2 <- sqrt(2) * var(CEA$logDalyPerThousand) * qnorm(0.95) / (2 * sd(CEA$logDalyPerThousand)) *
exp(sd(CEA$logDalyPerThousand) * qnorm(0.95)) / (sqrt(n))
se_2
n <- nrow(CEA)
# 2. Theta hat approximate SE
se_2 <- sqrt(2) * var(CEA$logDalyPerThousand) * qnorm(0.95) /
(2 * sd(CEA$logDalyPerThousand)) *
exp(sd(CEA$logDalyPerThousand) * qnorm(0.95)) / (sqrt(n))
nboot <- 10^4
one_boot <- function() {
samples <- sample(CEA$logDalyPerThousand, n, replace = T)
return(exp(sqrt(var(samples) * (n - 1)/(n)) * qnorm(0.95)))
}
boots <- replicate(nboot, one_boot())
se_2_boot <- sd(boots)
# 3. Non-parametric bootstrap
nboot <- 10^4
one_boot <- function() {
samples <- sample(CEA$DalyPerThousand, n, replace = T)
return(quantile(samples, 0.95) / quantile(samples, 0.5))
}
boots <- replicate(nboot, one_boot())
se_3 <- sd(boots)
# 4. Parametric bootstrap
mu_hat <- mean(CEA$logDalyPerThousand)
sigma_sq_hat <- var(CEA$logDalyPerThousand) * (n - 1) / n
one_boot <- function() {
samples <- exp(rnorm(n, mu_hat, sqrt(sigma_sq_hat)))
return(quantile(samples, 0.95) / quantile(samples, 0.5))
}
boots <- replicate(nboot, one_boot())
se_4 <- sd(boots)
c("Theta hat SE approximate" = se_2, "Theta hat SE bootstrapped" = se_2_boot,
"Non-parametric bootstrap" = se_3, "Parametric bootstrap" = se_4)
CEA$Country
unqiue(CEA$Country)
unique(CEA$Country)
sort(unique(CEA$Country))
read.csv("data/income.csv")
income <- read.csv("data/income.csv")
colnames(aggregated_countries)
colnames(income)
income <- read.csv("data/income.csv")[,c(1,2)]
colnames(income)
left_join(income, aggregated_countries, by=c("Country"))
inner_join(income, aggregated_countries, by=c("Country"))
aggregated_countries <- do.call(data.frame,
(aggregate(logDalyPerThousand ~ Country, CEA,
FUN = function(x) c(mu = mean(x), sd = sd(x) ) )))
country_count <- data.frame(table(CEA$Country))
colnames(country_count) <- c("Country", "Studies")
aggregated_countries <- left_join(aggregated_countries, country_count, by=c("Country"))
colnames(aggregated_countries) <- c("Country", "mu", "sd", "Studies")
grand_mean <- mean(CEA$logDalyPerThousand)
grand_var <- var(CEA$logDalyPerThousand)
aggregated_countries$adjustedDalyPerThousand <- 1 / (1 / grand_var + aggregated_countries$Studies /
aggregated_countries$sd) *
(grand_mean / grand_var + aggregated_countries$mu * aggregated_countries$Studies / aggregated_countries$sd)
high_val <- cbind("County" = aggregated_countries$Country[order(aggregated_countries$adjustedDalyPerThousand, decreasing = T)[1:10]],
"Adjusted DALYs averted per $1000" = round(exp(aggregated_countries$adjustedDalyPerThousand[order(aggregated_countries$adjustedDalyPerThousand, decreasing = T)[1:10]]), 4),
"Studies" = aggregated_countries$Studies[order(aggregated_countries$adjustedDalyPerThousand, decreasing = T)[1:10]])
knitr::kable(high_val)
low_val <- cbind("County" = aggregated_countries$Country[order(aggregated_countries$adjustedDalyPerThousand, decreasing = F)[1:10]],
"Adjusted DALYs averted per $1000" = round(exp(aggregated_countries$adjustedDalyPerThousand[order(aggregated_countries$adjustedDalyPerThousand, decreasing = F)[1:10]]), 4),
"Studies" = aggregated_countries$Studies[order(aggregated_countries$adjustedDalyPerThousand, decreasing = F)[1:10]])
knitr::kable(low_val)
income <- read.csv("data/income.csv")[,c(1,2)]
inner_join(CEA, aggregated_countries, by=c("Country"))
tmp <- inner_join(CEA, aggregated_countries, by=c("Country"))
tmp$Country
income <- read.csv("data/income.csv")[,c(1,2)]
tmp <- inner_join(CEA, income, by=c("Country"))
tmp$Income
CEA_with_income <- inner_join(CEA, income, by=c("Country"))
income <- read.csv("data/income.csv")[,c(1,2)]
CEA_with_income <- inner_join(CEA, income, by=c("Country"))
t.test(CEA_with_income$DalyPerThousand[CEA_with_income$Income == "High"],
CEA_with_income$DalyPerThousand[CEA_with_income$Income == "Low"])
income <- read.csv("data/income.csv")[,c(1,2)]
CEA_with_income <- inner_join(CEA, income, by=c("Country"))
t.test(CEA_with_income$DalyPerThousand[CEA_with_income$Income == "High"],
CEA_with_income$DalyPerThousand[CEA_with_income$Income == "Low"],
var.equal = F,
alternative = "two.sided")
nperm <- 10^4
run_perm <- function(x, y) {
n <- length(x)
joined_vec <- c(x,y)
indices <- sample(1:length(joined_vec), n)
abs(mean(joined_vec[indices]) - mean(joined_vec[-indices]))
}
perms <- replicate(nperm, run_perm(CEA_with_income$DalyPerThousand[CEA_with_income$Income == "High"],
CEA_with_income$DalyPerThousand[CEA_with_income$Income == "Low"]))
perms
mean(abs(mean(CEA_with_income$DalyPerThousand[CEA_with_income$Income == "High"]) -
mean(CEA_with_income$DalyPerThousand[CEA_with_income$Income == "Low"])) > perms)
nperm <- 10^5
run_perm <- function(x, y) {
n <- length(x)
joined_vec <- c(x,y)
indices <- sample(1:length(joined_vec), n)
abs(mean(joined_vec[indices]) - mean(joined_vec[-indices]))
}
perms <- replicate(nperm, run_perm(CEA_with_income$DalyPerThousand[CEA_with_income$Income == "High"],
CEA_with_income$DalyPerThousand[CEA_with_income$Income == "Low"]))
mean(abs(mean(CEA_with_income$DalyPerThousand[CEA_with_income$Income == "High"]) -
mean(CEA_with_income$DalyPerThousand[CEA_with_income$Income == "Low"])) > perms)
nperm <- 10^5
run_perm <- function(x, y) {
n <- length(x)
joined_vec <- c(x,y)
indices <- sample(1:length(joined_vec), n)
abs(mean(joined_vec[indices]) - mean(joined_vec[-indices]))
}
perms <- replicate(nperm, run_perm(CEA_with_income$DalyPerThousand[CEA_with_income$Income == "High"],
CEA_with_income$DalyPerThousand[CEA_with_income$Income == "Low"]))
mean(perms > abs(mean(CEA_with_income$DalyPerThousand[CEA_with_income$Income == "High"]) -
mean(CEA_with_income$DalyPerThousand[CEA_with_income$Income == "Low"])))
abs(mean(CEA_with_income$DalyPerThousand[CEA_with_income$Income == "High"]) -
mean(CEA_with_income$DalyPerThousand[CEA_with_income$Income == "Low"]))
ggplot(data.frame(x=perms), aes(x=x)) +
geom_density() +
theme_bw()
ggplot(data.frame(x=perms), aes(x=x)) +
geom_density() +
theme_bw() +
geom_vline(xintercept = abs(mean(CEA_with_income$DalyPerThousand[CEA_with_income$Income == "High"]) -
mean(CEA_with_income$DalyPerThousand[CEA_with_income$Income == "Low"])))
ggplot(data.frame(x=perms), aes(x=x)) +
geom_density() +
theme_bw() +
geom_vline(xintercept = abs(mean(CEA_with_income$DalyPerThousand[CEA_with_income$Income == "High"]) -
mean(CEA_with_income$DalyPerThousand[CEA_with_income$Income == "Low"])), col="red")
ggplot(CEA_with_income, aes(x=DalyPerThousand, col=Income)) +
geom_density()
ggplot(CEA_with_income, aes(x=DalyPerThousand, col=Income)) +
geom_density() +
scale_x_continuous(trans = 'log')
ggplot(CEA_with_income, aes(x=DalyPerThousand, col=Income)) +
geom_density() +
scale_x_continuous(trans = 'log', breaks = 10^((-5):4)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(CEA_with_income, aes(x=DalyPerThousand, col=Income)) +
geom_density() +
scale_x_continuous(trans = 'log', breaks = 10^((-5):4)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab("Density") +
xlab("DALYs averted per $1000") +
theme_bw() +
```
ggplot(CEA_with_income, aes(x=DalyPerThousand, col=Income)) +
geom_density() +
scale_x_continuous(trans = 'log', breaks = 10^((-5):4)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab("Density") +
xlab("DALYs averted per $1000") +
theme_bw()
ggplot(CEA_with_income, aes(x=DalyPerThousand, col=Income)) +
geom_density() +
scale_x_continuous(trans = 'log', breaks = 10^((-5):4)) +
ylab("Density") +
xlab("DALYs averted per $1000") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
n <- nrow(CEA)
# 2. Theta hat approximate SE
se_2 <- sqrt(2) * var(CEA$logDalyPerThousand) * qnorm(0.95) /
(2 * sd(CEA$logDalyPerThousand)) *
exp(sd(CEA$logDalyPerThousand) * qnorm(0.95)) / (sqrt(n))
# 3. Theta hat non-parametric SE
nboot <- 10^4
one_boot <- function() {
samples <- sample(CEA$logDalyPerThousand, n, replace = T)
return(exp(sqrt(var(samples) * (n - 1)/(n)) * qnorm(0.95)))
}
boots <- replicate(nboot, one_boot())
se_3 <- sd(boots)
# 4. Theta hat parametric SE
mu_hat <- mean(CEA$logDalyPerThousand)
sigma_sq_hat <- var(CEA$logDalyPerThousand) * (n - 1) / n
nboot <- 10^4
one_boot <- function() {
samples <- exp(rnorm(n, mu_hat, sqrt(sigma_sq_hat)))
return(exp(sqrt(var(samples) * (n - 1)/(n)) * qnorm(0.95)))
}
boots <- replicate(nboot, one_boot())
se_4 <- sd(boots)
# 5. Theta tilde non-parametric bootstrap
nboot <- 10^4
one_boot <- function() {
samples <- sample(CEA$DalyPerThousand, n, replace = T)
return(quantile(samples, 0.95) / quantile(samples, 0.5))
}
boots <- replicate(nboot, one_boot())
se_3 <- sd(boots)
# 6. Theta tilde parametric bootstrap
one_boot <- function() {
samples <- exp(rnorm(n, mu_hat, sqrt(sigma_sq_hat)))
return(quantile(samples, 0.95) / quantile(samples, 0.5))
}
boots <- replicate(nboot, one_boot())
se_4 <- sd(boots)
round(c("Theta hat" = exp(sqrt(var(CEA$logDalyPerThousand) *
(nrow(CEA) - 1)/(nrow(CEA))) * qnorm(0.95)),
"Theta tilde" = unname(quantile(CEA$DalyPerThousand, 0.95)) /
unname(quantile(CEA$DalyPerThousand, 0.5))), 3)
round(c("Theta hat SE approximate" = se_2, "Theta hat SE non-parametric bootstrapped" = se_3,
"Theta hat SE parametric bootstrap" = se_4,
"Theta tilde Non-parametric bootstrap" = se_5, "Theta tilde parametric bootstrap" = se_6), 3)
n <- nrow(CEA)
# 2. Theta hat approximate SE
se_2 <- sqrt(2) * var(CEA$logDalyPerThousand) * qnorm(0.95) /
(2 * sd(CEA$logDalyPerThousand)) *
exp(sd(CEA$logDalyPerThousand) * qnorm(0.95)) / (sqrt(n))
# 3. Theta hat non-parametric SE
nboot <- 10^4
one_boot <- function() {
samples <- sample(CEA$logDalyPerThousand, n, replace = T)
return(exp(sqrt(var(samples) * (n - 1)/(n)) * qnorm(0.95)))
}
boots <- replicate(nboot, one_boot())
se_3 <- sd(boots)
# 4. Theta hat parametric SE
mu_hat <- mean(CEA$logDalyPerThousand)
sigma_sq_hat <- var(CEA$logDalyPerThousand) * (n - 1) / n
nboot <- 10^4
one_boot <- function() {
samples <- exp(rnorm(n, mu_hat, sqrt(sigma_sq_hat)))
return(exp(sqrt(var(samples) * (n - 1)/(n)) * qnorm(0.95)))
}
boots <- replicate(nboot, one_boot())
se_4 <- sd(boots)
# 5. Theta tilde non-parametric bootstrap
one_boot <- function() {
samples <- sample(CEA$DalyPerThousand, n, replace = T)
return(quantile(samples, 0.95) / quantile(samples, 0.5))
}
boots <- replicate(nboot, one_boot())
se_5 <- sd(boots)
# 6. Theta tilde parametric bootstrap
one_boot <- function() {
samples <- exp(rnorm(n, mu_hat, sqrt(sigma_sq_hat)))
return(quantile(samples, 0.95) / quantile(samples, 0.5))
}
boots <- replicate(nboot, one_boot())
se_6 <- sd(boots)
round(c("Theta hat" = exp(sqrt(var(CEA$logDalyPerThousand) *
(nrow(CEA) - 1)/(nrow(CEA))) * qnorm(0.95)),
"Theta tilde" = unname(quantile(CEA$DalyPerThousand, 0.95)) /
unname(quantile(CEA$DalyPerThousand, 0.5))), 3)
round(c("Theta hat SE approximate" = se_2, "Theta hat SE non-parametric bootstrapped" = se_3,
"Theta hat SE parametric bootstrap" = se_4,
"Theta tilde Non-parametric bootstrap" = se_5, "Theta tilde parametric bootstrap" = se_6), 3)
# 4. Theta hat parametric SE
mu_hat <- mean(CEA$logDalyPerThousand)
sigma_sq_hat <- var(CEA$logDalyPerThousand) * (n - 1) / n
nboot <- 10^4
one_boot <- function() {
samples <- exp(rnorm(n, mu_hat, sqrt(sigma_sq_hat)))
return(exp(sqrt(var(samples) * (n - 1)/(n)) * qnorm(0.95)))
}
boots <- replicate(nboot, one_boot())
boots
round(c("Theta hat" = exp(sqrt(var(CEA$logDalyPerThousand) *
(nrow(CEA) - 1)/(nrow(CEA))) * qnorm(0.95)),
"Theta tilde" = unname(quantile(CEA$DalyPerThousand, 0.95)) /
unname(quantile(CEA$DalyPerThousand, 0.5))), 3)
round(c("Theta hat SE approximate" = se_2, "Theta hat SE non-parametric bootstrapped" = se_3,
"Theta hat SE parametric bootstrap" = se_4,
"Theta tilde Non-parametric bootstrap" = se_5, "Theta tilde parametric bootstrap" = se_6), 3)
boots
samples <- exp(rnorm(n, mu_hat, sqrt(sigma_sq_hat)))
samples
samples <- exp(rnorm(n, mu_hat, sqrt(sigma_sq_hat)))
samples
mean(samples)
var(samples)
quantile(samples, 0.95) / quantile(samples, 0.5)
sqrt(var(samples) * (n - 1)/(n))
exp(sqrt(var(samples) * (n - 1)/(n)) * qnorm(0.95))
samples <- sample(CEA$logDalyPerThousand, n, replace = T)
samples <- exp(rnorm(n, mu_hat, sqrt(sigma_sq_hat)))
var(samples)
# 3. Theta hat non-parametric SE
nboot <- 10^4
one_boot <- function() {
samples <- sample(CEA$logDalyPerThousand, n, replace = T)
return(exp(sqrt(var(samples) * (n - 1)/(n)) * qnorm(0.95)))
}
boots <- replicate(nboot, one_boot())
boots <- replicate(nboot, one_boot())
se_3 <- sd(boots)
se_3
n <- nrow(CEA)
# 2. Theta hat approximate SE
se_2 <- sqrt(2) * var(CEA$logDalyPerThousand) * qnorm(0.95) /
(2 * sd(CEA$logDalyPerThousand)) *
exp(sd(CEA$logDalyPerThousand) * qnorm(0.95)) / (sqrt(n))
# 3. Theta hat non-parametric SE
nboot <- 10^4
one_boot <- function() {
samples <- sample(CEA$logDalyPerThousand, n, replace = T)
return(exp(sqrt(var(samples) * (n - 1)/(n)) * qnorm(0.95)))
}
boots <- replicate(nboot, one_boot())
se_3 <- sd(boots)
# 4. Theta hat parametric SE
mu_hat <- mean(CEA$logDalyPerThousand)
sigma_sq_hat <- var(CEA$logDalyPerThousand) * (n - 1) / n
nboot <- 10^4
one_boot <- function() {
samples <- exp(rnorm(n, mu_hat, sqrt(sigma_sq_hat)))
return(exp(sqrt(var(log(samples)) * (n - 1)/(n)) * qnorm(0.95)))
}
boots <- replicate(nboot, one_boot())
se_4 <- sd(boots)
# 5. Theta tilde non-parametric bootstrap
one_boot <- function() {
samples <- sample(CEA$DalyPerThousand, n, replace = T)
return(quantile(samples, 0.95) / quantile(samples, 0.5))
}
boots <- replicate(nboot, one_boot())
se_5 <- sd(boots)
# 6. Theta tilde parametric bootstrap
one_boot <- function() {
samples <- exp(rnorm(n, mu_hat, sqrt(sigma_sq_hat)))
return(quantile(samples, 0.95) / quantile(samples, 0.5))
}
boots <- replicate(nboot, one_boot())
se_6 <- sd(boots)
round(c("Theta hat" = exp(sqrt(var(CEA$logDalyPerThousand) *
(nrow(CEA) - 1)/(nrow(CEA))) * qnorm(0.95)),
"Theta tilde" = unname(quantile(CEA$DalyPerThousand, 0.95)) /
unname(quantile(CEA$DalyPerThousand, 0.5))), 3)
round(c("Theta hat SE approximate" = se_2, "Theta hat SE non-parametric bootstrapped" = se_3,
"Theta hat SE parametric bootstrap" = se_4,
"Theta tilde Non-parametric bootstrap" = se_5, "Theta tilde parametric bootstrap" = se_6), 3)
data.frame(round(c("Theta hat SE approximate" = se_2, "Theta hat SE non-parametric bootstrapped" = se_3,
"Theta hat SE parametric bootstrap" = se_4,
"Theta tilde Non-parametric bootstrap" = se_5, "Theta tilde parametric bootstrap" = se_6), 3))
colnames(df) <- c("")
df
df <- data.frame(round(c("Theta hat SE approximate" = se_2,
"Theta hat SE non-parametric bootstrapped" = se_3,
"Theta hat SE parametric bootstrap" = se_4,
"Theta tilde Non-parametric bootstrap" = se_5,
"Theta tilde parametric bootstrap" = se_6), 3))
colnames(df) <- c("")
df
n <- nrow(CEA)
# 2. Theta hat approximate SE
se_2 <- sqrt(2) * var(CEA$logDalyPerThousand) * qnorm(0.95) /
(2 * sd(CEA$logDalyPerThousand)) *
exp(sd(CEA$logDalyPerThousand) * qnorm(0.95)) / (sqrt(n))
# 3. Theta hat non-parametric SE
nboot <- 10^4
one_boot <- function() {
samples <- sample(CEA$logDalyPerThousand, n, replace = T)
return(exp(sqrt(var(samples) * (n - 1)/(n)) * qnorm(0.95)))
}
boots <- replicate(nboot, one_boot())
se_3 <- sd(boots)
# 4. Theta hat parametric SE
mu_hat <- mean(CEA$logDalyPerThousand)
sigma_sq_hat <- var(CEA$logDalyPerThousand) * (n - 1) / n
nboot <- 10^4
one_boot <- function() {
samples <- exp(rnorm(n, mu_hat, sqrt(sigma_sq_hat)))
return(exp(sqrt(var(log(samples)) * (n - 1)/(n)) * qnorm(0.95)))
}
boots <- replicate(nboot, one_boot())
se_4 <- sd(boots)
# 5. Theta tilde non-parametric bootstrap
one_boot <- function() {
samples <- sample(CEA$DalyPerThousand, n, replace = T)
return(quantile(samples, 0.95) / quantile(samples, 0.5))
}
boots <- replicate(nboot, one_boot())
se_5 <- sd(boots)
# 6. Theta tilde parametric bootstrap
one_boot <- function() {
samples <- exp(rnorm(n, mu_hat, sqrt(sigma_sq_hat)))
return(quantile(samples, 0.95) / quantile(samples, 0.5))
}
boots <- replicate(nboot, one_boot())
se_6 <- sd(boots)
round(c("Theta hat" = exp(sqrt(var(CEA$logDalyPerThousand) *
(nrow(CEA) - 1)/(nrow(CEA))) * qnorm(0.95)),
"Theta tilde" = unname(quantile(CEA$DalyPerThousand, 0.95)) /
unname(quantile(CEA$DalyPerThousand, 0.5))), 3)
df <- data.frame(round(c("Theta hat SE approximate" = se_2,
"Theta hat SE non-parametric bootstrapped" = se_3,
"Theta hat SE parametric bootstrap" = se_4,
"Theta tilde Non-parametric bootstrap" = se_5,
"Theta tilde parametric bootstrap" = se_6), 3))
colnames(df) <- c("")
knitr::kable(df)
