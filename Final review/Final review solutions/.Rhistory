z_mat[i,j] <- rtruncnorm(1, lb, ub, theta_mat[sim - 1, i] + sum(theta_mat[sim - 1, (N + 1):(N + p)] * t2[i,]), 1)
}
}
z_mat_old <- z_mat
if (sim %% 200 == 0) {
print(sim)
}
V <- cbind(diag(nrow = N), t2)
Lambda <- diag(c(rep(sigma_sq_a[sim -1], N), rep(sigma_sq_b, p)))
Sigma <- solve(solve(Lambda) + M * t(V) %*% V)
eta <- Sigma %*% t(V) %*% rowSums(z_mat)
theta_mat[sim,] <- mvrnorm(1, eta, Sigma)
sigma_sq_a[sim] <- v_0 * s_sq_a + sum(theta_mat[sim, 1:N]^2) / rchisq(1, v_0 + N)
}
# Burn-in
theta_mat <- theta_mat[-(1:(3 * nsims/10)),]
sigma_sq_a <- sigma_sq_a[-(1:(3 * nsims/10))]
colnames(theta_mat) <- c(paste0("a", 1:N), colnames(t2))
plot_df <- melt(theta_mat)
colnames(plot_df) <- c("Iteration", "Variable", "Value")
plot_df <- rbind(plot_df, data.frame("Iteration" = 1:length(sigma_sq_a),
"Variable" = "sigma_sq_a",
"Value" = sigma_sq_a))
ggplot(plot_df, aes(x = Iteration, y = Value)) +
geom_point() +
facet_wrap(facets = ~ Variable, scales = "free", ncol = 4)
output_list <- run_gibbs(v_0, s_sq_a, 1)
mus <- t2 %*% t(theta_mat[,(1 + N):ncol(theta_mat)])
rankings <- apply(-mus, 2, order)
store_mat <- cbind(store_mat, colSums(abs(rankings - t1[,ranker])))
}
dim(store_mat)
store_mat <- cbind(store_mat, replicate(nrow(store_mat), sum(abs(sample(1:24, 24, replace = F) - sample(1:24, 24, replace = F)))))
store_mat
colnames(store_mat) <- c(1:(ncol(store_mat) - 1), "Null")
for_plot <- melt(store_mat)
ggplot(for_plot, aes(x = value, fill = variable)) +
geom_histogram()
head(for_plot)
head(store_mat)
for_plot <- melt(store_mat, id.vars=c())
head(for_plot)
for_plot <- melt(store_mat, id.vars="None")
head(for_plot)
unique(for_plot)
unique(for_plot$Var1)
unique(for_plot$Var2)
head(for_plot)
ggplot(for_plot, aes(x = value, fill = Var2)) +
geom_histogram()
ggplot(for_plot, aes(x = value, fill = Var2)) +
geom_density()
ggplot(for_plot, aes(x = value, fill = Var2)) +
geom_density(alpha=0.5)
ranker
t1_tmp <- t1[,-ranker]
sigma_sq_a <- vector(length = nsims)
sigma_sq_a[1] <- 5
theta_mat <- matrix(nrow = nsims, ncol = N + p)
theta_mat[1,] <- rep(1, N + p)
z_first <- t1_tmp
for (i in 1:ncol(z_first)) {
if (sum(is.na(z_first[,i])) > 0) {
z_first[,i][is.na(z_first[,i])] <- (24 - length((z_first[,i])[is.na(z_first[,i])]) + 1):24
}
}
Z_list <- list(-z_first + 24)
for (sim in 2:nsims) {
z_mat <- z_mat_old
for (j in 1:M) {
for (i in 1:N) {
if (is.na(t1_tmp[i,j])) {
lb <- -Inf
ub <- suppressWarnings(min(z_mat[,j][!is.na(t1_tmp[,j])]))
} else {
lb <- suppressWarnings(max(z_mat[,j][!is.na(t1_tmp[,j]) & t1_tmp[,j] > t1_tmp[i,j]]))
ub <- suppressWarnings(min(z_mat[,j][!is.na(t1_tmp[,j]) & t1_tmp[,j] < t1_tmp[i,j]]))
}
z_mat[i,j] <- rtruncnorm(1, lb, ub, theta_mat[sim - 1, i] + sum(theta_mat[sim - 1, (N + 1):(N + p)] * t2[i,]), 1)
}
}
z_mat_old <- z_mat
if (sim %% 200 == 0) {
print(sim)
}
V <- cbind(diag(nrow = N), t2)
Lambda <- diag(c(rep(sigma_sq_a[sim -1], N), rep(sigma_sq_b, p)))
Sigma <- solve(solve(Lambda) + M * t(V) %*% V)
eta <- Sigma %*% t(V) %*% rowSums(z_mat)
theta_mat[sim,] <- mvrnorm(1, eta, Sigma)
sigma_sq_a[sim] <- v_0 * s_sq_a + sum(theta_mat[sim, 1:N]^2) / rchisq(1, v_0 + N)
}
sim
z_mat <- z_mat_old
for (j in 1:M) {
for (i in 1:N) {
if (is.na(t1_tmp[i,j])) {
lb <- -Inf
ub <- suppressWarnings(min(z_mat[,j][!is.na(t1_tmp[,j])]))
} else {
lb <- suppressWarnings(max(z_mat[,j][!is.na(t1_tmp[,j]) & t1_tmp[,j] > t1_tmp[i,j]]))
ub <- suppressWarnings(min(z_mat[,j][!is.na(t1_tmp[,j]) & t1_tmp[,j] < t1_tmp[i,j]]))
}
z_mat[i,j] <- rtruncnorm(1, lb, ub, theta_mat[sim - 1, i] + sum(theta_mat[sim - 1, (N + 1):(N + p)] * t2[i,]), 1)
}
}
z_mat_old <- z_mat
if (sim %% 200 == 0) {
print(sim)
}
V <- cbind(diag(nrow = N), t2)
Lambda <- diag(c(rep(sigma_sq_a[sim -1], N), rep(sigma_sq_b, p)))
Sigma <- solve(solve(Lambda) + M * t(V) %*% V)
Lambda
t1_tmp <- t1[,-ranker]
sigma_sq_a <- vector(length = nsims)
sigma_sq_a[1] <- 5
theta_mat <- matrix(nrow = nsims, ncol = N + p)
theta_mat[1,] <- rep(1, N + p)
z_first <- t1_tmp
for (i in 1:ncol(z_first)) {
if (sum(is.na(z_first[,i])) > 0) {
z_first[,i][is.na(z_first[,i])] <- (24 - length((z_first[,i])[is.na(z_first[,i])]) + 1):24
}
}
Z_list <- list(-z_first + 24)
for (sim in 2:nsims) {
z_mat <- z_mat_old
for (j in 1:M) {
for (i in 1:N) {
if (is.na(t1_tmp[i,j])) {
lb <- -Inf
ub <- suppressWarnings(min(z_mat[,j][!is.na(t1_tmp[,j])]))
} else {
lb <- suppressWarnings(max(z_mat[,j][!is.na(t1_tmp[,j]) & t1_tmp[,j] > t1_tmp[i,j]]))
ub <- suppressWarnings(min(z_mat[,j][!is.na(t1_tmp[,j]) & t1_tmp[,j] < t1_tmp[i,j]]))
}
z_mat[i,j] <- rtruncnorm(1, lb, ub, theta_mat[sim - 1, i] + sum(theta_mat[sim - 1, (N + 1):(N + p)] * t2[i,]), 1)
}
}
z_mat_old <- z_mat
if (sim %% 200 == 0) {
print(sim)
}
V <- cbind(diag(nrow = N), t2)
Lambda <- diag(c(rep(sigma_sq_a[sim -1], N), rep(sigma_sq_b, p)))
Sigma <- solve(solve(Lambda) + M * t(V) %*% V)
eta <- Sigma %*% t(V) %*% rowSums(z_mat)
theta_mat[sim,] <- mvrnorm(1, eta, Sigma)
sigma_sq_a[sim] <- v_0 * s_sq_a + sum(theta_mat[sim, 1:N]^2) / rchisq(1, v_0 + N)
}
z_mat_old
t1_tmp <- t1[,-ranker]
sigma_sq_a <- vector(length = nsims)
sigma_sq_a[1] <- 5
theta_mat <- matrix(nrow = nsims, ncol = N + p)
theta_mat[1,] <- rep(1, N + p)
z_first <- t1_tmp
for (i in 1:ncol(z_first)) {
if (sum(is.na(z_first[,i])) > 0) {
z_first[,i][is.na(z_first[,i])] <- (24 - length((z_first[,i])[is.na(z_first[,i])]) + 1):24
}
}
Z_list <- list(-z_first + 24)
t1_tmp <- t1[,-ranker]
sigma_sq_a <- vector(length = nsims)
sigma_sq_a[1] <- 5
theta_mat <- matrix(nrow = nsims, ncol = N + p)
theta_mat[1,] <- rep(1, N + p)
z_first <- t1_tmp
for (i in 1:ncol(z_first)) {
if (sum(is.na(z_first[,i])) > 0) {
z_first[,i][is.na(z_first[,i])] <- (24 - length((z_first[,i])[is.na(z_first[,i])]) + 1):24
}
}
z_mat_old <- -z_first + 24
for (sim in 2:nsims) {
z_mat <- z_mat_old
for (j in 1:M) {
for (i in 1:N) {
if (is.na(t1_tmp[i,j])) {
lb <- -Inf
ub <- suppressWarnings(min(z_mat[,j][!is.na(t1_tmp[,j])]))
} else {
lb <- suppressWarnings(max(z_mat[,j][!is.na(t1_tmp[,j]) & t1_tmp[,j] > t1_tmp[i,j]]))
ub <- suppressWarnings(min(z_mat[,j][!is.na(t1_tmp[,j]) & t1_tmp[,j] < t1_tmp[i,j]]))
}
z_mat[i,j] <- rtruncnorm(1, lb, ub, theta_mat[sim - 1, i] + sum(theta_mat[sim - 1, (N + 1):(N + p)] * t2[i,]), 1)
}
}
z_mat_old <- z_mat
if (sim %% 200 == 0) {
print(sim)
}
V <- cbind(diag(nrow = N), t2)
Lambda <- diag(c(rep(sigma_sq_a[sim -1], N), rep(sigma_sq_b, p)))
Sigma <- solve(solve(Lambda) + M * t(V) %*% V)
eta <- Sigma %*% t(V) %*% rowSums(z_mat)
theta_mat[sim,] <- mvrnorm(1, eta, Sigma)
sigma_sq_a[sim] <- v_0 * s_sq_a + sum(theta_mat[sim, 1:N]^2) / rchisq(1, v_0 + N)
}
# Burn-in
theta_mat <- theta_mat[-(1:(3 * nsims/10)),]
sigma_sq_a <- sigma_sq_a[-(1:(3 * nsims/10))]
colnames(theta_mat) <- c(paste0("a", 1:N), colnames(t2))
plot_df <- melt(theta_mat)
colnames(plot_df) <- c("Iteration", "Variable", "Value")
plot_df <- rbind(plot_df, data.frame("Iteration" = 1:length(sigma_sq_a),
"Variable" = "sigma_sq_a",
"Value" = sigma_sq_a))
ggplot(plot_df, aes(x = Iteration, y = Value)) +
geom_point() +
facet_wrap(facets = ~ Variable, scales = "free", ncol = 4)
t1[,ranker]
head((rankings - t1[,ranker])[!is.na(t1[,ranker]),])
head((rankings - t1[,ranker])[!is.na(t1[,ranker]),])[,1:10]
dim((rankings - t1[,ranker])[!is.na(t1[,ranker]),])
mean(replicate(nrow(store_mat), sum(abs(sample(1:24, 24, replace = F) - sample(1:24, 24, replace = F)))))
mean(replicate(nrow(store_mat), sum(abs(sample(1:24, 24, replace = F) - sample(1:24, 24, replace = F)))) / 24)
mean(replicate(nrow(store_mat), sum(abs(sample(1:24, 24, replace = F) - sample(1:24, 24, replace = F)))) / 24)
mean(replicate(nrow(store_mat), sum(abs(sample(1:24, 24, replace = F) - sample(1:24, 24, replace = F)))) / 24)
mean(replicate(nrow(store_mat), sum(abs(sample(1:15, 15, replace = F) - sample(1:15, 15, replace = F)))) / 15)
setdiff(1:24, true_ranks[is.na(true_ranks)])
true_ranks <- t1[,ranker]
setdiff(1:24, true_ranks[is.na(true_ranks)])
true_ranks
setdiff(1:24, true_ranks[!is.na(true_ranks)])
true_ranks <- t1[,ranker]
true_ranks[is.na(true_ranks)] <- mean(setdiff(1:24, true_ranks[!is.na(true_ranks)]))
true_ranks
store_mat <- cbind(store_mat, colSums(abs(rankings - true_ranks)))
3 * nsims/10
7 * 1500/10
6 * 1500/10
v_0 <- 2
s_sq_a <- 10
sigma_sq_b <- 1
N <- nrow(t1)
M <- ncol(t1) - 1
p <- ncol(t2)
nsims <- round(1.5 * 10^3)
store_mat <- matrix(nrow=nsims * 4/10, ncol=0)
for (ranker in 1:ncol(t1)) {
t1_tmp <- t1[,-ranker]
sigma_sq_a <- vector(length = nsims)
sigma_sq_a[1] <- 5
theta_mat <- matrix(nrow = nsims, ncol = N + p)
theta_mat[1,] <- rep(1, N + p)
z_first <- t1_tmp
for (i in 1:ncol(z_first)) {
if (sum(is.na(z_first[,i])) > 0) {
z_first[,i][is.na(z_first[,i])] <- (24 - length((z_first[,i])[is.na(z_first[,i])]) + 1):24
}
}
z_mat_old <- -z_first + 24
for (sim in 2:nsims) {
z_mat <- z_mat_old
for (j in 1:M) {
for (i in 1:N) {
if (is.na(t1_tmp[i,j])) {
lb <- -Inf
ub <- suppressWarnings(min(z_mat[,j][!is.na(t1_tmp[,j])]))
} else {
lb <- suppressWarnings(max(z_mat[,j][!is.na(t1_tmp[,j]) & t1_tmp[,j] > t1_tmp[i,j]]))
ub <- suppressWarnings(min(z_mat[,j][!is.na(t1_tmp[,j]) & t1_tmp[,j] < t1_tmp[i,j]]))
}
z_mat[i,j] <- rtruncnorm(1, lb, ub, theta_mat[sim - 1, i] + sum(theta_mat[sim - 1, (N + 1):(N + p)] * t2[i,]), 1)
}
}
z_mat_old <- z_mat
if (sim %% 200 == 0) {
print(sim)
}
V <- cbind(diag(nrow = N), t2)
Lambda <- diag(c(rep(sigma_sq_a[sim -1], N), rep(sigma_sq_b, p)))
Sigma <- solve(solve(Lambda) + M * t(V) %*% V)
eta <- Sigma %*% t(V) %*% rowSums(z_mat)
theta_mat[sim,] <- mvrnorm(1, eta, Sigma)
sigma_sq_a[sim] <- v_0 * s_sq_a + sum(theta_mat[sim, 1:N]^2) / rchisq(1, v_0 + N)
}
# Burn-in
theta_mat <- theta_mat[-(1:(6 * nsims/10)),]
sigma_sq_a <- sigma_sq_a[-(1:(6 * nsims/10))]
colnames(theta_mat) <- c(paste0("a", 1:N), colnames(t2))
plot_df <- melt(theta_mat)
colnames(plot_df) <- c("Iteration", "Variable", "Value")
plot_df <- rbind(plot_df, data.frame("Iteration" = 1:length(sigma_sq_a),
"Variable" = "sigma_sq_a",
"Value" = sigma_sq_a))
ggplot(plot_df, aes(x = Iteration, y = Value)) +
geom_point() +
facet_wrap(facets = ~ Variable, scales = "free", ncol = 4)
mus <- t2 %*% t(theta_mat[,(1 + N):ncol(theta_mat)])
rankings <- apply(-mus, 2, order)
true_ranks <- t1[,ranker]
true_ranks[is.na(true_ranks)] <- mean(setdiff(1:24, true_ranks[!is.na(true_ranks)]))
store_mat <- cbind(store_mat, colSums(abs(rankings - true_ranks)))
}
store_mat <- cbind(store_mat, replicate(nrow(store_mat), sum(abs(sample(1:24, 24, replace = F) - sample(1:24, 24, replace = F)))))
colnames(store_mat) <- c(1:(ncol(store_mat) - 1), "Null")
for_plot <- melt(store_mat, id.vars="None")
ggplot(for_plot, aes(x = value, fill = Var2)) +
geom_density(alpha=0.2)
ggplot(for_plot, aes(x = value, fill = Var2)) +
geom_density(alpha=0.2)
ggplot(for_plot, aes(x = value, fill = Var2)) +
geom_density(alpha=0.2) +
labs(col = "Ranker")
ggplot(for_plot, aes(x = value, fill = Var2)) +
geom_density(alpha=0.2) +
labs(fill = "Ranker")
ggplot(for_plot, aes(x = value, fill = Var2)) +
geom_density(alpha=0.2) +
labs(fill = "Ranker") +
theme_bw()
ggplot(for_plot, aes(x = value, fill = Var2)) +
geom_density(alpha=0.2) +
labs(fill = "Ranker") +
theme_bw()
ggplot(for_plot, aes(x = value, fill = Var2)) +
geom_density(alpha=0.2) +
labs(fill = "Ranker") +
theme_bw() +
ylab("Density") +
xlab("Sum of absolute difference in ranks")
v_0 <- 2
s_sq_a <- 10
sigma_sq_b <- 1
N <- nrow(t1)
M <- ncol(t1) - 1
p <- ncol(t2)
nsims <- round(1.5 * 10^3)
store_mat <- matrix(nrow=nsims * 4/10, ncol=0)
for (ranker in 1:ncol(t1)) {
t1_tmp <- t1[,-ranker]
sigma_sq_a <- vector(length = nsims)
sigma_sq_a[1] <- 5
theta_mat <- matrix(nrow = nsims, ncol = N + p)
theta_mat[1,] <- rep(1, N + p)
z_first <- t1_tmp
for (i in 1:ncol(z_first)) {
if (sum(is.na(z_first[,i])) > 0) {
z_first[,i][is.na(z_first[,i])] <- (24 - length((z_first[,i])[is.na(z_first[,i])]) + 1):24
}
}
z_mat_old <- -z_first + 24
for (sim in 2:nsims) {
z_mat <- z_mat_old
for (j in 1:M) {
for (i in 1:N) {
if (is.na(t1_tmp[i,j])) {
lb <- -Inf
ub <- suppressWarnings(min(z_mat[,j][!is.na(t1_tmp[,j])]))
} else {
lb <- suppressWarnings(max(z_mat[,j][!is.na(t1_tmp[,j]) & t1_tmp[,j] > t1_tmp[i,j]]))
ub <- suppressWarnings(min(z_mat[,j][!is.na(t1_tmp[,j]) & t1_tmp[,j] < t1_tmp[i,j]]))
}
z_mat[i,j] <- rtruncnorm(1, lb, ub, theta_mat[sim - 1, i] + sum(theta_mat[sim - 1, (N + 1):(N + p)] * t2[i,]), 1)
}
}
z_mat_old <- z_mat
if (sim %% 200 == 0) {
print(sim)
}
V <- cbind(diag(nrow = N), t2)
Lambda <- diag(c(rep(sigma_sq_a[sim -1], N), rep(sigma_sq_b, p)))
Sigma <- solve(solve(Lambda) + M * t(V) %*% V)
eta <- Sigma %*% t(V) %*% rowSums(z_mat)
theta_mat[sim,] <- mvrnorm(1, eta, Sigma)
sigma_sq_a[sim] <- v_0 * s_sq_a + sum(theta_mat[sim, 1:N]^2) / rchisq(1, v_0 + N)
}
# Burn-in
theta_mat <- theta_mat[-(1:(6 * nsims/10)),]
sigma_sq_a <- sigma_sq_a[-(1:(6 * nsims/10))]
colnames(theta_mat) <- c(paste0("a", 1:N), colnames(t2))
plot_df <- melt(theta_mat)
colnames(plot_df) <- c("Iteration", "Variable", "Value")
plot_df <- rbind(plot_df, data.frame("Iteration" = 1:length(sigma_sq_a),
"Variable" = "sigma_sq_a",
"Value" = sigma_sq_a))
print(ggplot(plot_df, aes(x = Iteration, y = Value)) +
geom_point() +
facet_wrap(facets = ~ Variable, scales = "free", ncol = 4))
mus <- t2 %*% t(theta_mat[,(1 + N):ncol(theta_mat)])
rankings <- apply(-mus, 2, order)
true_ranks <- t1[,ranker]
true_ranks[is.na(true_ranks)] <- mean(setdiff(1:24, true_ranks[!is.na(true_ranks)]))
store_mat <- cbind(store_mat, colSums(abs(rankings - true_ranks)))
}
v_0 <- 2
s_sq_a <- 10
sigma_sq_b <- 1
N <- nrow(t1)
M <- ncol(t1) - 1
p <- ncol(t2)
nsims <- round(1.5 * 10^3)
store_mat <- matrix(nrow=nsims * 4/10, ncol=0)
for (ranker in 1:ncol(t1)) {
t1_tmp <- t1[,-ranker]
sigma_sq_a <- vector(length = nsims)
sigma_sq_a[1] <- 5
theta_mat <- matrix(nrow = nsims, ncol = N + p)
theta_mat[1,] <- rep(1, N + p)
z_first <- t1_tmp
for (i in 1:ncol(z_first)) {
if (sum(is.na(z_first[,i])) > 0) {
z_first[,i][is.na(z_first[,i])] <- (24 - length((z_first[,i])[is.na(z_first[,i])]) + 1):24
}
}
z_mat_old <- -z_first + 24
for (sim in 2:nsims) {
z_mat <- z_mat_old
for (j in 1:M) {
for (i in 1:N) {
if (is.na(t1_tmp[i,j])) {
lb <- -Inf
ub <- suppressWarnings(min(z_mat[,j][!is.na(t1_tmp[,j])]))
} else {
lb <- suppressWarnings(max(z_mat[,j][!is.na(t1_tmp[,j]) & t1_tmp[,j] > t1_tmp[i,j]]))
ub <- suppressWarnings(min(z_mat[,j][!is.na(t1_tmp[,j]) & t1_tmp[,j] < t1_tmp[i,j]]))
}
z_mat[i,j] <- rtruncnorm(1, lb, ub, theta_mat[sim - 1, i] + sum(theta_mat[sim - 1, (N + 1):(N + p)] * t2[i,]), 1)
}
}
z_mat_old <- z_mat
V <- cbind(diag(nrow = N), t2)
Lambda <- diag(c(rep(sigma_sq_a[sim -1], N), rep(sigma_sq_b, p)))
Sigma <- solve(solve(Lambda) + M * t(V) %*% V)
eta <- Sigma %*% t(V) %*% rowSums(z_mat)
theta_mat[sim,] <- mvrnorm(1, eta, Sigma)
sigma_sq_a[sim] <- v_0 * s_sq_a + sum(theta_mat[sim, 1:N]^2) / rchisq(1, v_0 + N)
}
# Burn-in
theta_mat <- theta_mat[-(1:(6 * nsims/10)),]
sigma_sq_a <- sigma_sq_a[-(1:(6 * nsims/10))]
colnames(theta_mat) <- c(paste0("a", 1:N), colnames(t2))
plot_df <- melt(theta_mat)
colnames(plot_df) <- c("Iteration", "Variable", "Value")
plot_df <- rbind(plot_df, data.frame("Iteration" = 1:length(sigma_sq_a),
"Variable" = "sigma_sq_a",
"Value" = sigma_sq_a))
print(ggplot(plot_df, aes(x = Iteration, y = Value)) +
geom_point() +
facet_wrap(facets = ~ Variable, scales = "free", ncol = 4))
mus <- t2 %*% t(theta_mat[,(1 + N):ncol(theta_mat)])
rankings <- apply(-mus, 2, order)
true_ranks <- t1[,ranker]
true_ranks[is.na(true_ranks)] <- mean(setdiff(1:24, true_ranks[!is.na(true_ranks)]))
store_mat <- cbind(store_mat, colSums(abs(rankings - true_ranks)))
}
v_0 <- 2
s_sq_a <- 10
sigma_sq_b <- 1
N <- nrow(t1)
M <- ncol(t1) - 1
p <- ncol(t2)
nsims <- round(1.5 * 10^3)
store_mat <- matrix(nrow=nsims * 4/10, ncol=0)
for (ranker in 1:ncol(t1)) {
t1_tmp <- t1[,-ranker]
sigma_sq_a <- vector(length = nsims)
sigma_sq_a[1] <- 5
theta_mat <- matrix(nrow = nsims, ncol = N + p)
theta_mat[1,] <- rep(1, N + p)
z_first <- t1_tmp
for (i in 1:ncol(z_first)) {
if (sum(is.na(z_first[,i])) > 0) {
z_first[,i][is.na(z_first[,i])] <- (24 - length((z_first[,i])[is.na(z_first[,i])]) + 1):24
}
}
z_mat_old <- -z_first + 24
for (sim in 2:nsims) {
z_mat <- z_mat_old
for (j in 1:M) {
for (i in 1:N) {
if (is.na(t1_tmp[i,j])) {
lb <- -Inf
ub <- suppressWarnings(min(z_mat[,j][!is.na(t1_tmp[,j])]))
} else {
lb <- suppressWarnings(max(z_mat[,j][!is.na(t1_tmp[,j]) & t1_tmp[,j] > t1_tmp[i,j]]))
ub <- suppressWarnings(min(z_mat[,j][!is.na(t1_tmp[,j]) & t1_tmp[,j] < t1_tmp[i,j]]))
}
z_mat[i,j] <- rtruncnorm(1, lb, ub, theta_mat[sim - 1, i] + sum(theta_mat[sim - 1, (N + 1):(N + p)] * t2[i,]), 1)
}
}
z_mat_old <- z_mat
V <- cbind(diag(nrow = N), t2)
Lambda <- diag(c(rep(sigma_sq_a[sim -1], N), rep(sigma_sq_b, p)))
Sigma <- solve(solve(Lambda) + M * t(V) %*% V)
eta <- Sigma %*% t(V) %*% rowSums(z_mat)
theta_mat[sim,] <- mvrnorm(1, eta, Sigma)
sigma_sq_a[sim] <- v_0 * s_sq_a + sum(theta_mat[sim, 1:N]^2) / rchisq(1, v_0 + N)
}
# Burn-in
theta_mat <- theta_mat[-(1:(6 * nsims/10)),]
sigma_sq_a <- sigma_sq_a[-(1:(6 * nsims/10))]
colnames(theta_mat) <- c(paste0("a", 1:N), colnames(t2))
plot_df <- melt(theta_mat)
colnames(plot_df) <- c("Iteration", "Variable", "Value")
plot_df <- rbind(plot_df, data.frame("Iteration" = 1:length(sigma_sq_a),
"Variable" = "sigma_sq_a",
"Value" = sigma_sq_a))
print(ggplot(plot_df, aes(x = Iteration, y = Value)) +
geom_point() +
facet_wrap(facets = ~ Variable, scales = "free", ncol = 4))
print(ranker)
mus <- t2 %*% t(theta_mat[,(1 + N):ncol(theta_mat)])
rankings <- apply(-mus, 2, order)
true_ranks <- t1[,ranker]
true_ranks[is.na(true_ranks)] <- mean(setdiff(1:24, true_ranks[!is.na(true_ranks)]))
store_mat <- cbind(store_mat, colSums(abs(rankings - true_ranks)))
}
